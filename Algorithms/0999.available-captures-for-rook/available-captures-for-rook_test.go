package problem0999

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

// tcs is testcase slice
var tcs = []struct {
	board [][]byte
	ans   int
}{

	{
		[][]byte{
			{'.', '.', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', 'p', '.', '.', '.', '.'},
			{'.', '.', '.', 'R', '.', '.', '.', 'p'},
			{'.', '.', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', 'p', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', '.', '.', '.'},
		},
		3,
	},

	{
		[][]byte{
			{'.', '.', '.', '.', '.', '.', '.', '.'},
			{'.', 'p', 'p', 'p', 'p', 'p', '.', '.'},
			{'.', 'p', 'p', 'B', 'p', 'p', '.', '.'},
			{'.', 'p', 'B', 'R', 'B', 'p', '.', '.'},
			{'.', 'p', 'p', 'B', 'p', 'p', '.', '.'},
			{'.', 'p', 'p', 'p', 'p', 'p', '.', '.'},
			{'.', '.', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', '.', '.', '.'},
		},
		0,
	},

	{
		[][]byte{
			{'.', '.', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', 'p', '.', '.', '.', '.'},
			{'.', '.', '.', 'p', '.', '.', '.', '.'},
			{'p', 'p', '.', 'R', '.', 'p', 'B', '.'},
			{'.', '.', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', 'B', '.', '.', '.', '.'},
			{'.', '.', '.', 'p', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', '.', '.', '.'},
		},
		3,
	},

	// 可以有多个 testcase
}

func Test_numRookCaptures(t *testing.T) {
	ast := assert.New(t)
	for _, tc := range tcs {
		ast.Equal(tc.ans, numRookCaptures(tc.board), "输入:%v", tc)
	}
}

func Test_numRookCaptures_NoRook(t *testing.T) {
	ast := assert.New(t)
	board := [][]byte{
		{'.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', 'p', '.', '.', '.', '.'},
		{'.', '.', '.', 'p', '.', '.', '.', '.'},
		{'p', 'p', '.', '.', '.', 'p', 'B', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.'},
		{'.', '.', '.', 'B', '.', '.', '.', '.'},
		{'.', '.', '.', 'p', '.', '.', '.', '.'},
		{'.', '.', '.', '.', '.', '.', '.', '.'},
	}
	ast.PanicsWithValue("No Rook", func() { numRookCaptures(board) }, "没有检测出不含 Rook 的 board")
}

func Benchmark_numRookCaptures(b *testing.B) {
	for i := 0; i < b.N; i++ {
		for _, tc := range tcs {
			numRookCaptures(tc.board)
		}
	}
}
